name: Build and Test
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          # Use the latest stable Xcode available on the GitHub macOS runner
          xcode-version: 'latest-stable'
          
      - name: Setup environment
        run: |
          touch .env
          echo "MarvelPublicKey=$MarvelPublicKey" >> .env
          echo "MarvelPrivateKey=$MarvelPrivateKey" >> .env
        env:
          MarvelPublicKey: ${{ secrets.MarvelPublicKey }}
          MarvelPrivateKey: ${{ secrets.MarvelPrivateKey }}
          
      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('Gemfile') }}-v1
          restore-keys: |
            ${{ runner.os }}-gems-
            
      - name: Install Ruby dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          bundle binstubs arkana
          bin/arkana
          
      - name: Setup iOS Simulator
        run: |
          # List available simulators
          xcrun simctl list devices
          
          # Delete any existing simulators to start fresh
          xcrun simctl delete unavailable
          
          # Create a fresh iPhone 17 simulator
          DEVICE_ID=$(xcrun simctl create "iPhone 17 Test" "iPhone 17" "iOS26.0" 2>/dev/null || xcrun simctl create "iPhone 17 Test" "iPhone 17" "iOS26.0")
          echo "Created simulator: $DEVICE_ID"
          
          # Boot the simulator
          xcrun simctl boot "$DEVICE_ID"
          
          # Wait for the simulator to be ready
          while ! xcrun simctl list devices | grep "$DEVICE_ID" | grep -q "Booted"; do
            echo "Waiting for simulator to boot..."
            sleep 2
          done
          
          echo "Simulator is ready"
          
      - name: Build for testing
        timeout-minutes: 15
        run: |
          set -o pipefail
          NSUnbufferedIO=YES xcodebuild \
            -project SwiftyMarvel.xcodeproj \
            -scheme SwiftyMarvel \
            -destination 'platform=iOS Simulator,name=iPhone 17 Test' \
            -enableCodeCoverage YES \
            -derivedDataPath DerivedData \
            -parallelizeTargets \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            clean build-for-testing | xcpretty
            
      - name: Run tests with coverage
        timeout-minutes: 15
        run: |
          set -o pipefail
          NSUnbufferedIO=YES xcodebuild \
            -project SwiftyMarvel.xcodeproj \
            -scheme SwiftyMarvel \
            -destination 'platform=iOS Simulator,name=iPhone 17 Test' \
            -enableCodeCoverage YES \
            -derivedDataPath DerivedData \
            test-without-building | xcpretty --report junit --output junit.xml
            
      - name: Generate coverage report
        run: |
          # Find the profdata file
          PROFDATA_FILE=$(find DerivedData -name "*.profdata" | head -n 1)
          
          if [ -z "$PROFDATA_FILE" ]; then
            echo "❌ No profdata file found"
            exit 1
          fi
          
          echo "✅ Found profdata: $PROFDATA_FILE"
          
          # Find the app and test bundles/binaries more reliably
          APP_BUNDLE=$(find DerivedData -name "SwiftyMarvel.app" -type d | head -n 1)
          TEST_BUNDLE=$(find DerivedData -name "SwiftyMarvelTests.xctest" -type d | head -n 1)
          
          APP_BINARY="$APP_BUNDLE/SwiftyMarvel"
          TEST_BINARY="$TEST_BUNDLE/SwiftyMarvelTests"
          
          if [ -z "$APP_BUNDLE" ] || [ -z "$TEST_BUNDLE" ] || [ ! -f "$APP_BINARY" ] || [ ! -f "$TEST_BINARY" ]; then
            echo "❌ Could not find test or app binaries"
            echo "App bundle: $APP_BUNDLE"
            echo "App binary: $APP_BINARY"
            echo "Test bundle: $TEST_BUNDLE"
            echo "Test binary: $TEST_BINARY"
            exit 1
          fi
          
          echo "✅ Found test binary: $TEST_BINARY"
          echo "✅ Found app binary: $APP_BINARY"
          
          # Generate coverage report using llvm-cov with minimal filtering (only exclude test files)
          xcrun llvm-cov export \
            -format="lcov" \
            -instr-profile="$PROFDATA_FILE" \
            "$APP_BINARY" \
            -object "$TEST_BINARY" \
            -ignore-filename-regex=".*Tests\.swift$" \
            -ignore-filename-regex=".*/MockingbirdMocks/.*" \
            -ignore-filename-regex=".*/MockingbirdSupport/.*" \
            -ignore-filename-regex=".*/SourcePackages/.*" \
            -ignore-filename-regex=".*/vendor/.*" \
            > coverage_raw.lcov
          
          # Clean up the coverage report to fix path issues
          sed "s|$GITHUB_WORKSPACE/||g" coverage_raw.lcov | \
          grep -v "^SF:/Users/" | \
          grep -v "fixtures" | \
          grep -v "gems/" > coverage.lcov
          
          # Verify the coverage file has content
          if [ ! -s coverage.lcov ]; then
            echo "❌ Coverage file is empty after processing"
            echo "Raw coverage content:"
            head -20 coverage_raw.lcov
            exit 1
          fi
          
          echo "✅ Generated and cleaned coverage.lcov"
          echo "Coverage file size: $(wc -l < coverage.lcov) lines"
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.lcov
          fail_ci_if_error: false
          verbose: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            junit.xml
            coverage.lcov
