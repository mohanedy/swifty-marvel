name: Build Status
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build-and-test:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest
      - name: Add .env file
        run: |
          touch .env
          echo "MarvelPublicKey=$MarvelPublicKey" >> .env
          echo "MarvelPrivateKey=$MarvelPrivateKey" >> .env
      - name: Install Bundler
        run: gem install bundler
      - name: Install xcpretty and coverage tools
        run: |
          gem install xcpretty
          gem install slather
          # Install xcparse for better xcresult handling
          brew install chargepoint/xcparse/xcparse
          # Install xccov-to-cobertura-xml for direct conversion
          npm install -g xccov-to-cobertura-xml
      - name: Install Gems
        run: |
          bundle install
          bundle binstubs arkana
          bin/arkana
      - name: Build & Test
        run: |
          xcodebuild clean build test \
            -project SwiftyMarvel.xcodeproj \
            -scheme SwiftyMarvel \
            -destination "platform=iOS Simulator,name=iPhone 15" \
            -derivedDataPath ./DerivedData \
            -resultBundlePath ./TestResults.xcresult \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=YES \
            -enableCodeCoverage YES | xcpretty
      - name: Debug - List coverage files
        run: |
          echo "Checking for coverage files..."
          find ./DerivedData -name "*.profdata" 2>/dev/null || echo "No .profdata files found in DerivedData"
          find ./TestResults.xcresult -name "*.xccovreport" 2>/dev/null || echo "No .xccovreport files found in TestResults"
          echo "TestResults.xcresult contents:"
          ls -la ./TestResults.xcresult/ || echo "TestResults.xcresult not found"
          echo "DerivedData contents:"
          find ./DerivedData -type d -name "*coverage*" 2>/dev/null || echo "No coverage directories found"
      - name: Prepare code coverage report
        run: |
          echo "Trying multiple approaches to extract coverage..."
          
          # Method 1: Try xcparse
          echo "1. Trying xcparse..."
          if xcparse codecov ./TestResults.xcresult coverage.xml; then
            echo "✅ xcparse succeeded"
            mv coverage.xml cobertura.xml
          else
            echo "❌ xcparse failed"
            
            # Method 2: Try xccov-to-cobertura-xml
            echo "2. Trying xccov-to-cobertura-xml..."
            if xcrun xccov view --report --json ./TestResults.xcresult > coverage-report.json && \
               xccov-to-cobertura-xml coverage-report.json > cobertura.xml; then
              echo "✅ xccov-to-cobertura-xml succeeded"
            else
              echo "❌ xccov-to-cobertura-xml failed"
              
              # Method 3: Extract profdata and use slather
              echo "3. Trying to extract profdata for slather..."
              find ./TestResults.xcresult -name "*.profdata" -exec cp {} ./coverage.profdata \;
              
              if [ -f "./coverage.profdata" ]; then
                echo "Found profdata file, copying to DerivedData..."
                mkdir -p ./DerivedData/Build/ProfileData
                cp ./coverage.profdata ./DerivedData/Build/ProfileData/
                
                echo "Running slather with profdata..."
                slather coverage \
                  --scheme SwiftyMarvel \
                  --configuration Debug \
                  --build-directory ./DerivedData \
                  SwiftyMarvel.xcodeproj
              else
                echo "❌ No profdata found, trying basic slather..."
                slather coverage \
                  --scheme SwiftyMarvel \
                  --configuration Debug \
                  SwiftyMarvel.xcodeproj
              fi
            fi
          fi
      - name: Verify coverage file
        run: |
          if [ -f "cobertura.xml" ]; then
            echo "✅ cobertura.xml found"
            head -20 cobertura.xml
          else
            echo "❌ cobertura.xml not found"
            ls -la *.xml || echo "No XML files found"
          fi
      - name: Upload Code Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./cobertura.xml
          fail_ci_if_error: true
          verbose: true
